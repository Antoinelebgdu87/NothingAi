// Syst√®me de license instantan√© pour Vercel - ZERO latence
class InstantLicenseManager {
  private userLicenseKey = "nothingai_license_instant";

  // Cl√©s valides pr√©d√©finies (marche TOUJOURS)
  private validLicenses = [
    "NothingAi-4C24HUEQ",
    "NothingAi-TEST1234",
    "NothingAi-DEMO5678",
    "NothingAi-FREE0000",
    "NothingAi-ADMIN999",
    "NothingAi-VERCEL01",
    "NothingAi-INSTANT1",
    "NothingAi-RAPID123",
  ];

  // V√©rifier si une cl√© est valide (INSTANTAN√â)
  public isValidLicense(licenseKey: string): boolean {
    if (!licenseKey || typeof licenseKey !== "string") {
      return false;
    }

    const cleanKey = licenseKey.trim().toUpperCase();

    // V√©rifier les cl√©s pr√©d√©finies
    if (this.validLicenses.includes(cleanKey)) {
      console.log("‚úÖ Cl√© pr√©d√©finie valide:", cleanKey);
      return true;
    }

    // V√©rifier le format g√©n√©rique NothingAi-XXXXXXXX (8+ caract√®res)
    const formatRegex = /^NOTHINGAI-[A-Z0-9]{8,}$/;
    if (formatRegex.test(cleanKey)) {
      console.log("‚úÖ Format valide accept√©:", cleanKey);
      return true;
    }

    console.log("‚ùå Cl√© invalide:", cleanKey);
    return false;
  }

  // Activer une license (INSTANTAN√â)
  public activateLicense(licenseKey: string): {
    success: boolean;
    message: string;
  } {
    if (!licenseKey || !licenseKey.trim()) {
      return {
        success: false,
        message: "Veuillez entrer une cl√© de license",
      };
    }

    const cleanKey = licenseKey.trim().toUpperCase();

    if (this.isValidLicense(cleanKey)) {
      // Sauvegarder imm√©diatement
      this.saveLicense(cleanKey);

      console.log("üéâ License activ√©e:", cleanKey);
      return {
        success: true,
        message: "License activ√©e avec succ√®s !",
      };
    } else {
      return {
        success: false,
        message: "Cl√© de license invalide. Format attendu: NothingAi-XXXXXXXX",
      };
    }
  }

  // Sauvegarder la license (INSTANTAN√â)
  private saveLicense(licenseKey: string): void {
    try {
      localStorage.setItem(this.userLicenseKey, licenseKey);
      console.log("üíæ License sauvegard√©e:", licenseKey);
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur sauvegarde:", error);
    }
  }

  // R√©cup√©rer la license sauvegard√©e (INSTANTAN√â)
  public getSavedLicense(): string | null {
    try {
      const saved = localStorage.getItem(this.userLicenseKey);
      console.log("üìã License sauvegard√©e:", saved || "Aucune");
      return saved;
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur r√©cup√©ration:", error);
      return null;
    }
  }

  // V√©rifier si l'utilisateur a une license valide (INSTANTAN√â)
  public hasValidLicense(): boolean {
    const saved = this.getSavedLicense();

    if (!saved) {
      console.log("‚ùå Aucune license sauvegard√©e");
      return false;
    }

    const isValid = this.isValidLicense(saved);
    console.log("üîç License sauvegard√©e valide:", isValid);

    return isValid;
  }

  // Supprimer la license (INSTANTAN√â)
  public clearLicense(): void {
    try {
      localStorage.removeItem(this.userLicenseKey);
      console.log("üóëÔ∏è License supprim√©e");
    } catch (error) {
      console.warn("‚ö†Ô∏è Erreur suppression:", error);
    }
  }

  // Obtenir toutes les cl√©s valides (pour les tests)
  public getValidLicenses(): string[] {
    return [...this.validLicenses];
  }

  // G√©n√©rer une nouvelle cl√© al√©atoire (INSTANTAN√â)
  public generateLicense(): string {
    const randomCode = Math.random().toString(36).substr(2, 8).toUpperCase();
    const newKey = `NothingAi-${randomCode}`;

    // Ajouter √† la liste des cl√©s valides
    this.validLicenses.push(newKey);

    console.log("üÜï Nouvelle cl√© g√©n√©r√©e:", newKey);
    return newKey;
  }

  // Statistiques simples (INSTANTAN√â)
  public getStats() {
    return {
      totalValidLicenses: this.validLicenses.length,
      hasActiveLicense: this.hasValidLicense(),
      currentLicense: this.getSavedLicense(),
      systemType: "Instant Vercel",
    };
  }
}

// Instance unique
export const instantLicenseManager = new InstantLicenseManager();

// Export du type pour TypeScript
export type InstantLicenseResult = {
  success: boolean;
  message: string;
};
